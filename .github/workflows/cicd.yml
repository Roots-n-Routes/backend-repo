name: Deploy R-n-R Backend to AWS EC2

on:
  workflow_dispatch:
  push:
    branches:
      - feature/cicd-setup

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SECRET }} # Dummy Secret Name - Replace in GitHub Secrets
          aws-region: ${{ secrets.AWS_REGION_SECRET }}           # Dummy Secret Name - Replace in GitHub Secrets
          role-session-name: GitHubActionsRnRBackendDeployEC2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL_SECRET }} #Provided in github secrets
          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as the image tag
        run: |
          echo "Building image..."
          docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
          echo "Pushing image $ECR_REPOSITORY_URL:$IMAGE_TAG..."
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
          echo "image_uri=$ECR_REPOSITORY_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT # Output the full URI

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_SECRET }}               #Provided in github secrets
          username: ${{ secrets.EC2_USERNAME_SECRET }}         #Provided in github secrets
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY_SECRET }}    #Provided in github secrets
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            echo "Logging into ECR on EC2 instance..."
            # Assumes AWS CLI is installed on EC2 and the instance has an IAM role with ECR permissions
            aws ecr get-login-password --region ${{ secrets.AWS_REGION_SECRET }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "Pulling new image: ${{ steps.build-image.outputs.image_uri }}"
            docker pull ${{ steps.build-image.outputs.image_uri }}

            echo "Stopping and removing existing container..."
            docker stop r-n-r-backend-app || true # Ignore error if container doesn't exist
            docker rm r-n-r-backend-app || true # Ignore error if container doesn't exist

            echo "Writing secrets to temporary env file..."
            # Create a temporary file with the application secrets content
            # Ensure the ALL_SECRETS content in GitHub is formatted like a .env file (KEY=VALUE per line)
            # with correct variable names expected by the application.
            echo "${{ secrets.ALL_SECRETS }}" > /tmp/deploy.env

            echo "Starting new container with secrets from file..."
            # Use --env-file to load variables and correct port mapping
            docker run -d --name r-n-r-backend-app -p 80:4000 --restart always \
              --env-file /tmp/deploy.env \
              ${{ steps.build-image.outputs.image_uri }}

            echo "Removing temporary env file..."
            rm /tmp/deploy.env

            echo "Deployment via SSH completed successfully."
            # Optional: Add 'docker ps' to verify the container is running
            docker ps
